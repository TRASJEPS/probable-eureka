{"version":3,"sources":["webpack://react-currency-input-field/./src/components/CurrencyInput.tsx","webpack://react-currency-input-field/./src/components/utils/cleanValue.ts","webpack://react-currency-input-field/./src/components/utils/escapeRegExp.ts","webpack://react-currency-input-field/./src/components/utils/fixedDecimalValue.ts","webpack://react-currency-input-field/./src/components/utils/formatValue.ts","webpack://react-currency-input-field/./src/components/utils/getLocaleConfig.ts","webpack://react-currency-input-field/./src/components/utils/getSuffix.ts","webpack://react-currency-input-field/./src/components/utils/index.ts","webpack://react-currency-input-field/./src/components/utils/isNumber.ts","webpack://react-currency-input-field/./src/components/utils/padTrimValue.ts","webpack://react-currency-input-field/./src/components/utils/parseAbbrValue.ts","webpack://react-currency-input-field/./src/components/utils/removeInvalidChars.ts","webpack://react-currency-input-field/./src/components/utils/removeSeparators.ts","webpack://react-currency-input-field/./src/index.ts","webpack://react-currency-input-field/external \"react\"","webpack://react-currency-input-field/webpack/bootstrap","webpack://react-currency-input-field/webpack/startup"],"names":["CurrencyInput","forwardRef","ref","allowDecimals","allowNegativeValue","id","name","className","customInput","decimalsLimit","defaultValue","disabled","userMaxLength","userValue","onValueChange","fixedDecimalLength","placeholder","decimalScale","prefix","suffix","intlConfig","step","min","max","disableGroupSeparators","disableAbbreviations","_decimalSeparator","_groupSeparator","onChange","onFocus","onBlur","onKeyDown","onKeyUp","props","Error","isNumber","localeConfig","useMemo","getLocaleConfig","decimalSeparator","groupSeparator","formatValueOptions","cleanValueOptions","formattedStateValue","undefined","formatValue","value","String","useState","stateValue","setStateValue","dirty","setDirty","cursor","setCursor","inputRef","useRef","processChange","selectionStart","valueOnly","cleanValue","replace","length","formattedValue","newCursor","useEffect","current","setSelectionRange","formattedPropsValue","inputProps","type","inputMode","event","fixedDecimals","fixedDecimalValue","newValue","padTrimValue","key","preventDefault","currentValue","parseFloat","fixedLength","includes","Number","split","toFixed","getSuffix","CustomInput","abbreviations","isNegative","RegExp","escapeRegExp","test","exec","prefixWithValue","preValue","withoutPrefix","concat","withoutSeparators","removeSeparators","withoutInvalidChars","removeInvalidChars","some","letter","toLowerCase","parsed","parseAbbrValue","includeNegative","int","decimals","trimmedDecimals","slice","stringToGoIntoTheRegex","reg","match","options","_value","replaceDecimalSeparator","parts","Intl","NumberFormat","locale","currency","style","minimumFractionDigits","maximumFractionDigits","formatToParts","formatted","replaceParts","intlSuffix","includeDecimalSeparator","join","reduce","prev","i","defaultConfig","currencySymbol","curr","suffixReg","suffixMatch","input","abbrValue","_decimalPlaces","valueLength","p","Math","pow","d","round","abbrMap","k","m","b","digits","abbr","multiplier","validChars","chars","separator","CurrencyInputProps","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"mappings":"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","file":"index.js","sourcesContent":["import React, { FC, useState, useEffect, useRef, forwardRef, useMemo } from 'react';\nimport { CurrencyInputProps } from './CurrencyInputProps';\nimport {\n  isNumber,\n  cleanValue,\n  fixedDecimalValue,\n  formatValue,\n  getLocaleConfig,\n  padTrimValue,\n  CleanValueOptions,\n  getSuffix,\n} from './utils';\n\nexport const CurrencyInput: FC<CurrencyInputProps> = forwardRef<\n  HTMLInputElement,\n  CurrencyInputProps\n>(\n  (\n    {\n      allowDecimals = true,\n      allowNegativeValue = true,\n      id,\n      name,\n      className,\n      customInput,\n      decimalsLimit,\n      defaultValue,\n      disabled = false,\n      maxLength: userMaxLength,\n      value: userValue,\n      onValueChange,\n      fixedDecimalLength,\n      placeholder,\n      decimalScale,\n      prefix,\n      suffix,\n      intlConfig,\n      step,\n      min,\n      max,\n      disableGroupSeparators = false,\n      disableAbbreviations = false,\n      decimalSeparator: _decimalSeparator,\n      groupSeparator: _groupSeparator,\n      onChange,\n      onFocus,\n      onBlur,\n      onKeyDown,\n      onKeyUp,\n      ...props\n    }: CurrencyInputProps,\n    ref\n  ) => {\n    if (_decimalSeparator && _groupSeparator && _decimalSeparator === _groupSeparator) {\n      throw new Error('decimalSeparator cannot be the same as groupSeparator');\n    }\n\n    if (_decimalSeparator && isNumber(_decimalSeparator)) {\n      throw new Error('decimalSeparator cannot be a number');\n    }\n\n    if (_groupSeparator && isNumber(_groupSeparator)) {\n      throw new Error('groupSeparator cannot be a number');\n    }\n\n    const localeConfig = useMemo(() => getLocaleConfig(intlConfig), [intlConfig]);\n    const decimalSeparator = _decimalSeparator || localeConfig.decimalSeparator || '';\n    const groupSeparator = _groupSeparator || localeConfig.groupSeparator || '';\n\n    const formatValueOptions = {\n      decimalSeparator,\n      groupSeparator,\n      disableGroupSeparators,\n      intlConfig,\n      prefix: prefix || localeConfig.prefix,\n      suffix: suffix,\n    };\n\n    const cleanValueOptions: Partial<CleanValueOptions> = {\n      decimalSeparator,\n      groupSeparator,\n      allowDecimals,\n      decimalsLimit: decimalsLimit || fixedDecimalLength || 2,\n      allowNegativeValue,\n      disableAbbreviations,\n      prefix: prefix || localeConfig.prefix,\n    };\n\n    const formattedStateValue =\n      defaultValue !== undefined\n        ? formatValue({ ...formatValueOptions, decimalScale, value: String(defaultValue) })\n        : userValue !== undefined\n        ? formatValue({ ...formatValueOptions, decimalScale, value: String(userValue) })\n        : '';\n\n    const [stateValue, setStateValue] = useState(formattedStateValue);\n    const [dirty, setDirty] = useState(false);\n    const [cursor, setCursor] = useState(0);\n    const inputRef = ref || useRef<HTMLInputElement>(null);\n\n    const processChange = (value: string, selectionStart?: number | null): void => {\n      setDirty(true);\n      const valueOnly = cleanValue({ value, ...cleanValueOptions });\n\n      if (valueOnly === '') {\n        onValueChange && onValueChange(undefined, name);\n        setStateValue('');\n        return;\n      }\n\n      if (userMaxLength && valueOnly.replace(/-/g, '').length > userMaxLength) {\n        return;\n      }\n\n      if (valueOnly === '-' || valueOnly === decimalSeparator) {\n        onValueChange && onValueChange(undefined, name);\n        setStateValue(value);\n        return;\n      }\n\n      const formattedValue = formatValue({ value: valueOnly, ...formatValueOptions });\n\n      /* istanbul ignore next */\n      if (selectionStart !== undefined && selectionStart !== null) {\n        // Prevent cursor jumping\n        const newCursor = selectionStart + (formattedValue.length - value.length) || 1;\n        setCursor(newCursor);\n      }\n\n      setStateValue(formattedValue);\n\n      onValueChange && onValueChange(valueOnly, name);\n    };\n\n    const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n      const {\n        target: { value, selectionStart },\n      } = event;\n\n      processChange(value, selectionStart);\n\n      onChange && onChange(event);\n    };\n\n    const handleOnFocus = (event: React.FocusEvent<HTMLInputElement>): number => {\n      onFocus && onFocus(event);\n      return stateValue ? stateValue.length : 0;\n    };\n\n    const handleOnBlur = (event: React.FocusEvent<HTMLInputElement>): void => {\n      const {\n        target: { value },\n      } = event;\n\n      const valueOnly = cleanValue({ value, ...cleanValueOptions });\n\n      if (valueOnly === '-' || !valueOnly) {\n        setStateValue('');\n        onBlur && onBlur(event);\n        return;\n      }\n\n      const fixedDecimals = fixedDecimalValue(valueOnly, decimalSeparator, fixedDecimalLength);\n\n      // Add padding or trim value to decimalScale\n      const newValue = padTrimValue(\n        fixedDecimals,\n        decimalSeparator,\n        decimalScale !== undefined ? decimalScale : fixedDecimalLength\n      );\n\n      onValueChange && onValueChange(newValue, name);\n\n      const formattedValue = formatValue({\n        ...formatValueOptions,\n        value: newValue,\n      });\n\n      setStateValue(formattedValue);\n\n      onBlur && onBlur(event);\n    };\n\n    const handleOnKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      const { key } = event;\n\n      if (step && (key === 'ArrowUp' || key === 'ArrowDown')) {\n        event.preventDefault();\n        setCursor(stateValue.length);\n\n        const currentValue =\n          parseFloat(\n            userValue !== undefined\n              ? String(userValue).replace(decimalSeparator, '.')\n              : cleanValue({ value: stateValue, ...cleanValueOptions })\n          ) || 0;\n        const newValue = key === 'ArrowUp' ? currentValue + step : currentValue - step;\n\n        if (min !== undefined && newValue < min) {\n          return;\n        }\n\n        if (max !== undefined && newValue > max) {\n          return;\n        }\n\n        const fixedLength = String(step).includes(decimalSeparator)\n          ? Number(String(step).split(decimalSeparator)[1].length)\n          : undefined;\n\n        processChange(\n          String(fixedLength ? newValue.toFixed(fixedLength) : newValue).replace(\n            '.',\n            decimalSeparator\n          )\n        );\n      }\n\n      onKeyDown && onKeyDown(event);\n    };\n\n    const handleOnKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      const {\n        key,\n        currentTarget: { selectionStart },\n      } = event;\n      if (key !== 'ArrowUp' && key !== 'ArrowDown' && stateValue !== '-') {\n        const suffix = getSuffix(stateValue, { groupSeparator, decimalSeparator });\n\n        if (suffix && selectionStart && selectionStart > stateValue.length - suffix.length) {\n          if (inputRef && typeof inputRef === 'object' && inputRef.current) {\n            const newCursor = stateValue.length - suffix.length;\n            inputRef.current.setSelectionRange(newCursor, newCursor);\n          }\n        }\n      }\n\n      onKeyUp && onKeyUp(event);\n    };\n\n    /* istanbul ignore next */\n    useEffect(() => {\n      // prevent cursor jumping if editing value\n      if (\n        dirty &&\n        stateValue !== '-' &&\n        inputRef &&\n        typeof inputRef === 'object' &&\n        inputRef.current\n      ) {\n        inputRef.current.setSelectionRange(cursor, cursor);\n      }\n    }, [stateValue, cursor, inputRef, dirty]);\n\n    const formattedPropsValue =\n      userValue !== undefined\n        ? formatValue({\n            ...formatValueOptions,\n            decimalScale: dirty ? undefined : decimalScale,\n            value: String(userValue),\n          })\n        : undefined;\n\n    const inputProps: React.InputHTMLAttributes<HTMLInputElement> = {\n      type: 'text',\n      inputMode: 'decimal',\n      id,\n      name,\n      className,\n      onChange: handleOnChange,\n      onBlur: handleOnBlur,\n      onFocus: handleOnFocus,\n      onKeyDown: handleOnKeyDown,\n      onKeyUp: handleOnKeyUp,\n      placeholder,\n      disabled,\n      value:\n        formattedPropsValue !== undefined && stateValue !== '-' && stateValue !== decimalSeparator\n          ? formattedPropsValue\n          : stateValue,\n      ref: inputRef,\n      ...props,\n    };\n\n    if (customInput) {\n      const CustomInput = customInput;\n      return <CustomInput {...inputProps} />;\n    }\n\n    return <input {...inputProps} />;\n  }\n);\n\nCurrencyInput.displayName = 'CurrencyInput';\n\nexport default CurrencyInput;\n","import { parseAbbrValue } from './parseAbbrValue';\nimport { removeSeparators } from './removeSeparators';\nimport { removeInvalidChars } from './removeInvalidChars';\nimport { escapeRegExp } from './escapeRegExp';\nimport { CurrencyInputProps } from '../CurrencyInputProps';\n\nexport type CleanValueOptions = Pick<\n  CurrencyInputProps,\n  | 'decimalSeparator'\n  | 'groupSeparator'\n  | 'allowDecimals'\n  | 'decimalsLimit'\n  | 'allowNegativeValue'\n  | 'disableAbbreviations'\n  | 'prefix'\n> & { value: string };\n\n/**\n * Remove prefix, separators and extra decimals from value\n */\nexport const cleanValue = ({\n  value,\n  groupSeparator = ',',\n  decimalSeparator = '.',\n  allowDecimals = true,\n  decimalsLimit = 2,\n  allowNegativeValue = true,\n  disableAbbreviations = false,\n  prefix = '',\n}: CleanValueOptions): string => {\n  if (value === '-') {\n    return value;\n  }\n\n  const abbreviations = disableAbbreviations ? [] : ['k', 'm', 'b'];\n  const reg = new RegExp(`((^|\\\\D)-\\\\d)|(-${escapeRegExp(prefix)})`);\n  const isNegative = reg.test(value);\n\n  // Is there a digit before the prefix? eg. 1$\n  const [prefixWithValue, preValue] = RegExp(`(\\\\d+)-?${escapeRegExp(prefix)}`).exec(value) || [];\n  const withoutPrefix = prefix\n    ? prefixWithValue\n      ? value.replace(prefixWithValue, '').concat(preValue)\n      : value.replace(prefix, '')\n    : value;\n  const withoutSeparators = removeSeparators(withoutPrefix, groupSeparator);\n  const withoutInvalidChars = removeInvalidChars(withoutSeparators, [\n    groupSeparator,\n    decimalSeparator,\n    ...abbreviations,\n  ]);\n\n  let valueOnly = withoutInvalidChars;\n\n  if (!disableAbbreviations) {\n    // disallow letter without number\n    if (abbreviations.some((letter) => letter === withoutInvalidChars.toLowerCase())) {\n      return '';\n    }\n    const parsed = parseAbbrValue(withoutInvalidChars, decimalSeparator);\n    if (parsed) {\n      valueOnly = String(parsed);\n    }\n  }\n\n  const includeNegative = isNegative && allowNegativeValue ? '-' : '';\n\n  if (decimalSeparator && valueOnly.includes(decimalSeparator)) {\n    const [int, decimals] = withoutInvalidChars.split(decimalSeparator);\n    const trimmedDecimals = decimalsLimit && decimals ? decimals.slice(0, decimalsLimit) : decimals;\n    const includeDecimals = allowDecimals ? `${decimalSeparator}${trimmedDecimals}` : '';\n\n    return `${includeNegative}${int}${includeDecimals}`;\n  }\n\n  return `${includeNegative}${valueOnly}`;\n};\n","/**\n * Escape regex char\n *\n * See: https://stackoverflow.com/questions/17885855/use-dynamic-variable-string-as-regex-pattern-in-javascript\n */\nexport const escapeRegExp = (stringToGoIntoTheRegex: string): string => {\n  return stringToGoIntoTheRegex.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n};\n","export const fixedDecimalValue = (\n  value: string,\n  decimalSeparator: string,\n  fixedDecimalLength?: number\n): string => {\n  if (fixedDecimalLength && value.length > 1) {\n    if (value.includes(decimalSeparator)) {\n      const [int, decimals] = value.split(decimalSeparator);\n      if (decimals.length > fixedDecimalLength) {\n        return `${int}${decimalSeparator}${decimals.slice(0, fixedDecimalLength)}`;\n      }\n    }\n\n    const reg =\n      value.length > fixedDecimalLength\n        ? new RegExp(`(\\\\d+)(\\\\d{${fixedDecimalLength}})`)\n        : new RegExp(`(\\\\d)(\\\\d+)`);\n\n    const match = value.match(reg);\n    if (match) {\n      const [, int, decimals] = match;\n      return `${int}${decimalSeparator}${decimals}`;\n    }\n  }\n\n  return value;\n};\n","import { IntlConfig } from '../CurrencyInputProps';\nimport { escapeRegExp } from './escapeRegExp';\nimport { getSuffix } from './getSuffix';\n\nexport type FormatValueOptions = {\n  /**\n   * Value to format\n   */\n  value: string | undefined;\n\n  /**\n   * Decimal separator\n   *\n   * Default = '.'\n   */\n  decimalSeparator?: string;\n\n  /**\n   * Group separator\n   *\n   * Default = ','\n   */\n  groupSeparator?: string;\n\n  /**\n   * Turn off separators\n   *\n   * This will override Group separators\n   *\n   * Default = false\n   */\n  disableGroupSeparators?: boolean;\n\n  /**\n   * Intl locale currency config\n   */\n  intlConfig?: IntlConfig;\n\n  /**\n   * Specify decimal scale for padding/trimming\n   *\n   * Eg. 1.5 -> 1.50 or 1.234 -> 1.23\n   */\n  decimalScale?: number;\n\n  /**\n   * Prefix\n   */\n  prefix?: string;\n\n  /**\n   * Suffix\n   */\n  suffix?: string;\n};\n\n/**\n * Format value with decimal separator, group separator and prefix\n */\nexport const formatValue = (options: FormatValueOptions): string => {\n  const {\n    value: _value,\n    decimalSeparator,\n    intlConfig,\n    decimalScale,\n    prefix = '',\n    suffix = '',\n  } = options;\n\n  if (_value === '' || _value === undefined) {\n    return '';\n  }\n\n  if (_value === '-') {\n    return '-';\n  }\n\n  const isNegative = new RegExp(`^\\\\d?-${prefix ? `${escapeRegExp(prefix)}?` : ''}\\\\d`).test(\n    _value\n  );\n  const value =\n    decimalSeparator !== '.'\n      ? replaceDecimalSeparator(_value, decimalSeparator, isNegative)\n      : _value;\n\n  const numberFormatter = intlConfig\n    ? new Intl.NumberFormat(\n        intlConfig.locale,\n        intlConfig.currency\n          ? {\n              style: 'currency',\n              currency: intlConfig.currency,\n              minimumFractionDigits: decimalScale || 0,\n              maximumFractionDigits: 20,\n            }\n          : undefined\n      )\n    : new Intl.NumberFormat(undefined, {\n        minimumFractionDigits: decimalScale || 0,\n        maximumFractionDigits: 20,\n      });\n\n  const parts = numberFormatter.formatToParts(Number(value));\n\n  let formatted = replaceParts(parts, options);\n\n  // Does intl formatting add a suffix?\n  const intlSuffix = getSuffix(formatted, { ...options });\n\n  // Include decimal separator if user input ends with decimal separator\n  const includeDecimalSeparator = _value.slice(-1) === decimalSeparator ? decimalSeparator : '';\n\n  const [, decimals] = value.match(RegExp('\\\\d+\\\\.(\\\\d+)')) || [];\n\n  // Keep original decimal padding if no decimalScale\n  if (decimalScale === undefined && decimals && decimalSeparator) {\n    if (formatted.includes(decimalSeparator)) {\n      formatted = formatted.replace(\n        RegExp(`(\\\\d+)(${escapeRegExp(decimalSeparator)})(\\\\d+)`, 'g'),\n        `$1$2${decimals}`\n      );\n    } else {\n      if (intlSuffix && !suffix) {\n        formatted = formatted.replace(intlSuffix, `${decimalSeparator}${decimals}${intlSuffix}`);\n      } else {\n        formatted = `${formatted}${decimalSeparator}${decimals}`;\n      }\n    }\n  }\n\n  if (suffix && includeDecimalSeparator) {\n    return `${formatted}${includeDecimalSeparator}${suffix}`;\n  }\n\n  if (intlSuffix && includeDecimalSeparator) {\n    return formatted.replace(intlSuffix, `${includeDecimalSeparator}${intlSuffix}`);\n  }\n\n  if (intlSuffix && suffix) {\n    return formatted.replace(intlSuffix, `${includeDecimalSeparator}${suffix}`);\n  }\n\n  return [formatted, includeDecimalSeparator, suffix].join('');\n};\n\n/**\n * Before converting to Number, decimal separator has to be .\n */\nconst replaceDecimalSeparator = (\n  value: string,\n  decimalSeparator: FormatValueOptions['decimalSeparator'],\n  isNegative: boolean\n): string => {\n  let newValue = value;\n  if (decimalSeparator && decimalSeparator !== '.') {\n    newValue = newValue.replace(RegExp(escapeRegExp(decimalSeparator), 'g'), '.');\n    if (isNegative && decimalSeparator === '-') {\n      newValue = `-${newValue.slice(1)}`;\n    }\n  }\n  return newValue;\n};\n\nconst replaceParts = (\n  parts: Intl.NumberFormatPart[],\n  {\n    prefix,\n    groupSeparator,\n    decimalSeparator,\n    decimalScale,\n    disableGroupSeparators = false,\n  }: Pick<\n    FormatValueOptions,\n    'prefix' | 'groupSeparator' | 'decimalSeparator' | 'decimalScale' | 'disableGroupSeparators'\n  >\n): string => {\n  return parts\n    .reduce(\n      (prev, { type, value }, i) => {\n        if (i === 0 && prefix) {\n          if (type === 'minusSign') {\n            return [value, prefix];\n          }\n\n          if (type === 'currency') {\n            return [...prev, prefix];\n          }\n\n          return [prefix, value];\n        }\n\n        if (type === 'currency') {\n          return prefix ? prev : [...prev, value];\n        }\n\n        if (type === 'group') {\n          return !disableGroupSeparators\n            ? [...prev, groupSeparator !== undefined ? groupSeparator : value]\n            : prev;\n        }\n\n        if (type === 'decimal') {\n          if (decimalScale !== undefined && decimalScale === 0) {\n            return prev;\n          }\n\n          return [...prev, decimalSeparator !== undefined ? decimalSeparator : value];\n        }\n\n        if (type === 'fraction') {\n          return [...prev, decimalScale !== undefined ? value.slice(0, decimalScale) : value];\n        }\n\n        return [...prev, value];\n      },\n      ['']\n    )\n    .join('');\n};\n","import { IntlConfig } from '../CurrencyInputProps';\n\ntype LocaleConfig = {\n  currencySymbol: string;\n  groupSeparator: string;\n  decimalSeparator: string;\n  prefix: string;\n  suffix: string;\n};\n\nconst defaultConfig: LocaleConfig = {\n  currencySymbol: '',\n  groupSeparator: '',\n  decimalSeparator: '',\n  prefix: '',\n  suffix: '',\n};\n\n/**\n * Get locale config from input or default\n */\nexport const getLocaleConfig = (intlConfig?: IntlConfig): LocaleConfig => {\n  const { locale, currency } = intlConfig || {};\n  const numberFormatter = locale\n    ? new Intl.NumberFormat(locale, currency ? { currency, style: 'currency' } : undefined)\n    : new Intl.NumberFormat();\n\n  return numberFormatter.formatToParts(1000.1).reduce((prev, curr, i): LocaleConfig => {\n    if (curr.type === 'currency') {\n      if (i === 0) {\n        return { ...prev, currencySymbol: curr.value, prefix: curr.value };\n      } else {\n        return { ...prev, currencySymbol: curr.value, suffix: curr.value };\n      }\n    }\n    if (curr.type === 'group') {\n      return { ...prev, groupSeparator: curr.value };\n    }\n    if (curr.type === 'decimal') {\n      return { ...prev, decimalSeparator: curr.value };\n    }\n\n    return prev;\n  }, defaultConfig);\n};\n","import { escapeRegExp } from './escapeRegExp';\ntype Options = {\n  decimalSeparator?: string;\n  groupSeparator?: string;\n};\n\nexport const getSuffix = (\n  value: string,\n  { groupSeparator = ',', decimalSeparator = '.' }: Options\n): string | undefined => {\n  const suffixReg = new RegExp(\n    `\\\\d([^${escapeRegExp(groupSeparator)}${escapeRegExp(decimalSeparator)}0-9]+)`\n  );\n  const suffixMatch = value.match(suffixReg);\n  return suffixMatch ? suffixMatch[1] : undefined;\n};\n","export * from './cleanValue';\nexport * from './fixedDecimalValue';\nexport * from './formatValue';\nexport * from './getLocaleConfig';\nexport * from './getSuffix';\nexport * from './isNumber';\nexport * from './padTrimValue';\n","export const isNumber = (input: string): boolean => RegExp(/\\d/, 'gi').test(input);\n","export const padTrimValue = (\n  value: string,\n  decimalSeparator = '.',\n  decimalScale?: number\n): string => {\n  if (decimalScale === undefined || value === '' || value === undefined) {\n    return value;\n  }\n\n  if (!value.match(/\\d/g)) {\n    return '';\n  }\n\n  const [int, decimals] = value.split(decimalSeparator);\n\n  if (decimalScale === 0) {\n    return int;\n  }\n\n  let newValue = decimals || '';\n\n  if (newValue.length < decimalScale) {\n    while (newValue.length < decimalScale) {\n      newValue += '0';\n    }\n  } else {\n    newValue = newValue.slice(0, decimalScale);\n  }\n\n  return `${int}${decimalSeparator}${newValue}`;\n};\n","import { escapeRegExp } from './escapeRegExp';\n\n/**\n * Abbreviate number eg. 1000 = 1k\n *\n * Source: https://stackoverflow.com/a/9345181\n */\nexport const abbrValue = (value: number, decimalSeparator = '.', _decimalPlaces = 10): string => {\n  if (value > 999) {\n    let valueLength = ('' + value).length;\n    const p = Math.pow;\n    const d = p(10, _decimalPlaces);\n    valueLength -= valueLength % 3;\n\n    const abbrValue = Math.round((value * d) / p(10, valueLength)) / d + ' kMGTPE'[valueLength / 3];\n    return abbrValue.replace('.', decimalSeparator);\n  }\n\n  return String(value);\n};\n\ntype AbbrMap = { [key: string]: number };\n\nconst abbrMap: AbbrMap = { k: 1000, m: 1000000, b: 1000000000 };\n\n/**\n * Parse a value with abbreviation e.g 1k = 1000\n */\nexport const parseAbbrValue = (value: string, decimalSeparator = '.'): number | undefined => {\n  const reg = new RegExp(`(\\\\d+(${escapeRegExp(decimalSeparator)}\\\\d*)?)([kmb])$`, 'i');\n  const match = value.match(reg);\n\n  if (match) {\n    const [, digits, , abbr] = match;\n    const multiplier = abbrMap[abbr.toLowerCase()];\n\n    return Number(digits.replace(decimalSeparator, '.')) * multiplier;\n  }\n\n  return undefined;\n};\n","import { escapeRegExp } from './escapeRegExp';\n\n/**\n * Remove invalid characters\n */\nexport const removeInvalidChars = (value: string, validChars: ReadonlyArray<string>): string => {\n  const chars = escapeRegExp(validChars.join(''));\n  const reg = new RegExp(`[^\\\\d${chars}]`, 'gi');\n  return value.replace(reg, '');\n};\n","import { escapeRegExp } from './escapeRegExp';\n\n/**\n * Remove group separator from value eg. 1,000 > 1000\n */\nexport const removeSeparators = (value: string, separator = ','): string => {\n  const reg = new RegExp(escapeRegExp(separator), 'g');\n  return value.replace(reg, '');\n};\n","import CurrencyInput from './components/CurrencyInput';\n\nexport { CurrencyInputProps } from './components/CurrencyInputProps';\nexport default CurrencyInput;\nexport { formatValue } from './components/utils/formatValue';\n","module.exports = require(\"react\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(22);\n"],"sourceRoot":""}