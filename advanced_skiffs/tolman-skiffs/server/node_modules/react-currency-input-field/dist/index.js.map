{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/utils/escapeRegExp.ts","webpack:///./src/components/utils/formatValue.ts","webpack:///./src/components/utils/getSuffix.ts","webpack:///./src/index.ts","webpack:///./src/components/CurrencyInput.tsx","webpack:///external \"react\"","webpack:///./src/components/utils/index.ts","webpack:///./src/components/utils/cleanValue.ts","webpack:///./src/components/utils/parseAbbrValue.ts","webpack:///./src/components/utils/removeSeparators.ts","webpack:///./src/components/utils/removeInvalidChars.ts","webpack:///./src/components/utils/fixedDecimalValue.ts","webpack:///./src/components/utils/getLocaleConfig.ts","webpack:///./src/components/utils/isNumber.ts","webpack:///./src/components/utils/padTrimValue.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","escapeRegExp","stringToGoIntoTheRegex","replace","formatValue","options","_value","decimalSeparator","intlConfig","decimalScale","prefix","suffix","undefined","isNegative","RegExp","test","replaceDecimalSeparator","parts","Intl","NumberFormat","locale","currency","style","minimumFractionDigits","maximumFractionDigits","formatToParts","Number","formatted","replaceParts","intlSuffix","getSuffix","includeDecimalSeparator","slice","decimals","match","includes","join","newValue","groupSeparator","disableGroupSeparators","reduce","prev","type","suffixReg","suffixMatch","CurrencyInput","forwardRef","ref","allowDecimals","allowNegativeValue","id","className","customInput","decimalsLimit","defaultValue","disabled","userMaxLength","userValue","onValueChange","fixedDecimalLength","placeholder","step","min","max","disableAbbreviations","_decimalSeparator","_groupSeparator","onChange","onFocus","onBlur","onKeyDown","onKeyUp","props","Error","isNumber","localeConfig","useMemo","getLocaleConfig","formatValueOptions","cleanValueOptions","formattedStateValue","String","useState","stateValue","setStateValue","dirty","setDirty","cursor","setCursor","inputRef","useRef","processChange","selectionStart","valueOnly","cleanValue","length","formattedValue","useEffect","current","setSelectionRange","formattedPropsValue","inputProps","inputMode","event","fixedDecimals","fixedDecimalValue","padTrimValue","preventDefault","currentValue","parseFloat","fixedLength","split","toFixed","newCursor","CustomInput","displayName","require","abbreviations","exec","prefixWithValue","preValue","withoutPrefix","concat","withoutSeparators","removeSeparators","withoutInvalidChars","removeInvalidChars","some","letter","toLowerCase","parsed","parseAbbrValue","includeNegative","int","trimmedDecimals","abbrValue","_decimalPlaces","valueLength","Math","pow","round","abbrMap","k","b","reg","digits","abbr","multiplier","separator","validChars","chars","defaultConfig","currencySymbol","curr","input"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","/**\n * Escape regex char\n *\n * See: https://stackoverflow.com/questions/17885855/use-dynamic-variable-string-as-regex-pattern-in-javascript\n */\nexport const escapeRegExp = (stringToGoIntoTheRegex: string): string => {\n  return stringToGoIntoTheRegex.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n};\n","import { IntlConfig } from '../CurrencyInputProps';\nimport { escapeRegExp } from './escapeRegExp';\nimport { getSuffix } from './getSuffix';\n\nexport type FormatValueOptions = {\n  /**\n   * Value to format\n   */\n  value: string | undefined;\n\n  /**\n   * Decimal separator\n   *\n   * Default = '.'\n   */\n  decimalSeparator?: string;\n\n  /**\n   * Group separator\n   *\n   * Default = ','\n   */\n  groupSeparator?: string;\n\n  /**\n   * Turn off separators\n   *\n   * This will override Group separators\n   *\n   * Default = false\n   */\n  disableGroupSeparators?: boolean;\n\n  /**\n   * Intl locale currency config\n   */\n  intlConfig?: IntlConfig;\n\n  /**\n   * Specify decimal scale for padding/trimming\n   *\n   * Eg. 1.5 -> 1.50 or 1.234 -> 1.23\n   */\n  decimalScale?: number;\n\n  /**\n   * Prefix\n   */\n  prefix?: string;\n\n  /**\n   * Suffix\n   */\n  suffix?: string;\n};\n\n/**\n * Format value with decimal separator, group separator and prefix\n */\nexport const formatValue = (options: FormatValueOptions): string => {\n  const {\n    value: _value,\n    decimalSeparator,\n    intlConfig,\n    decimalScale,\n    prefix = '',\n    suffix = '',\n  } = options;\n\n  if (_value === '' || _value === undefined) {\n    return '';\n  }\n\n  if (_value === '-') {\n    return '-';\n  }\n\n  const isNegative = new RegExp(`^\\\\d?-${prefix ? `${escapeRegExp(prefix)}?` : ''}\\\\d`).test(\n    _value\n  );\n  const value =\n    decimalSeparator !== '.'\n      ? replaceDecimalSeparator(_value, decimalSeparator, isNegative)\n      : _value;\n\n  const numberFormatter = intlConfig\n    ? new Intl.NumberFormat(\n        intlConfig.locale,\n        intlConfig.currency\n          ? {\n              style: 'currency',\n              currency: intlConfig.currency,\n              minimumFractionDigits: decimalScale || 0,\n              maximumFractionDigits: 20,\n            }\n          : undefined\n      )\n    : new Intl.NumberFormat(undefined, {\n        minimumFractionDigits: decimalScale || 0,\n        maximumFractionDigits: 20,\n      });\n\n  const parts = numberFormatter.formatToParts(Number(value));\n\n  let formatted = replaceParts(parts, options);\n\n  // Does intl formatting add a suffix?\n  const intlSuffix = getSuffix(formatted, { ...options });\n\n  // Include decimal separator if user input ends with decimal separator\n  const includeDecimalSeparator = _value.slice(-1) === decimalSeparator ? decimalSeparator : '';\n\n  const [, decimals] = value.match(RegExp('\\\\d+\\\\.(\\\\d+)')) || [];\n\n  // Keep original decimal padding if no decimalScale\n  if (decimalScale === undefined && decimals && decimalSeparator) {\n    if (formatted.includes(decimalSeparator)) {\n      formatted = formatted.replace(\n        RegExp(`(\\\\d+)(${escapeRegExp(decimalSeparator)})(\\\\d+)`, 'g'),\n        `$1$2${decimals}`\n      );\n    } else {\n      if (intlSuffix && !suffix) {\n        formatted = formatted.replace(intlSuffix, `${decimalSeparator}${decimals}${intlSuffix}`);\n      } else {\n        formatted = `${formatted}${decimalSeparator}${decimals}`;\n      }\n    }\n  }\n\n  if (suffix && includeDecimalSeparator) {\n    return `${formatted}${includeDecimalSeparator}${suffix}`;\n  }\n\n  if (intlSuffix && includeDecimalSeparator) {\n    return formatted.replace(intlSuffix, `${includeDecimalSeparator}${intlSuffix}`);\n  }\n\n  if (intlSuffix && suffix) {\n    return formatted.replace(intlSuffix, `${includeDecimalSeparator}${suffix}`);\n  }\n\n  return [formatted, includeDecimalSeparator, suffix].join('');\n};\n\n/**\n * Before converting to Number, decimal separator has to be .\n */\nconst replaceDecimalSeparator = (\n  value: string,\n  decimalSeparator: FormatValueOptions['decimalSeparator'],\n  isNegative: boolean\n): string => {\n  let newValue = value;\n  if (decimalSeparator && decimalSeparator !== '.') {\n    newValue = newValue.replace(RegExp(escapeRegExp(decimalSeparator), 'g'), '.');\n    if (isNegative && decimalSeparator === '-') {\n      newValue = `-${newValue.slice(1)}`;\n    }\n  }\n  return newValue;\n};\n\nconst replaceParts = (\n  parts: Intl.NumberFormatPart[],\n  {\n    prefix,\n    groupSeparator,\n    decimalSeparator,\n    decimalScale,\n    disableGroupSeparators = false,\n  }: Pick<\n    FormatValueOptions,\n    'prefix' | 'groupSeparator' | 'decimalSeparator' | 'decimalScale' | 'disableGroupSeparators'\n  >\n): string => {\n  return parts\n    .reduce(\n      (prev, { type, value }, i) => {\n        if (i === 0 && prefix) {\n          if (type === 'minusSign') {\n            return [value, prefix];\n          }\n\n          if (type === 'currency') {\n            return [...prev, prefix];\n          }\n\n          return [prefix, value];\n        }\n\n        if (type === 'currency') {\n          return prefix ? prev : [...prev, value];\n        }\n\n        if (type === 'group') {\n          return !disableGroupSeparators\n            ? [...prev, groupSeparator !== undefined ? groupSeparator : value]\n            : prev;\n        }\n\n        if (type === 'decimal') {\n          if (decimalScale !== undefined && decimalScale === 0) {\n            return prev;\n          }\n\n          return [...prev, decimalSeparator !== undefined ? decimalSeparator : value];\n        }\n\n        if (type === 'fraction') {\n          return [...prev, decimalScale !== undefined ? value.slice(0, decimalScale) : value];\n        }\n\n        return [...prev, value];\n      },\n      ['']\n    )\n    .join('');\n};\n","import { escapeRegExp } from './escapeRegExp';\ntype Options = {\n  decimalSeparator?: string;\n  groupSeparator?: string;\n};\n\nexport const getSuffix = (\n  value: string,\n  { groupSeparator = ',', decimalSeparator = '.' }: Options\n): string | undefined => {\n  const suffixReg = new RegExp(\n    `\\\\d([^${escapeRegExp(groupSeparator)}${escapeRegExp(decimalSeparator)}0-9]+)`\n  );\n  const suffixMatch = value.match(suffixReg);\n  return suffixMatch ? suffixMatch[1] : undefined;\n};\n","import CurrencyInput from './components/CurrencyInput';\n\nexport default CurrencyInput;\nexport { formatValue } from './components/utils/formatValue';\n","import React, { FC, useState, useEffect, useRef, forwardRef, useMemo } from 'react';\nimport { CurrencyInputProps } from './CurrencyInputProps';\nimport {\n  isNumber,\n  cleanValue,\n  fixedDecimalValue,\n  formatValue,\n  getLocaleConfig,\n  padTrimValue,\n  CleanValueOptions,\n  getSuffix,\n} from './utils';\n\nexport const CurrencyInput: FC<CurrencyInputProps> = forwardRef<\n  HTMLInputElement,\n  CurrencyInputProps\n>(\n  (\n    {\n      allowDecimals = true,\n      allowNegativeValue = true,\n      id,\n      name,\n      className,\n      customInput,\n      decimalsLimit,\n      defaultValue,\n      disabled = false,\n      maxLength: userMaxLength,\n      value: userValue,\n      onValueChange,\n      fixedDecimalLength,\n      placeholder,\n      decimalScale,\n      prefix,\n      suffix,\n      intlConfig,\n      step,\n      min,\n      max,\n      disableGroupSeparators = false,\n      disableAbbreviations = false,\n      decimalSeparator: _decimalSeparator,\n      groupSeparator: _groupSeparator,\n      onChange,\n      onFocus,\n      onBlur,\n      onKeyDown,\n      onKeyUp,\n      ...props\n    }: CurrencyInputProps,\n    ref\n  ) => {\n    if (_decimalSeparator && _groupSeparator && _decimalSeparator === _groupSeparator) {\n      throw new Error('decimalSeparator cannot be the same as groupSeparator');\n    }\n\n    if (_decimalSeparator && isNumber(_decimalSeparator)) {\n      throw new Error('decimalSeparator cannot be a number');\n    }\n\n    if (_groupSeparator && isNumber(_groupSeparator)) {\n      throw new Error('groupSeparator cannot be a number');\n    }\n\n    const localeConfig = useMemo(() => getLocaleConfig(intlConfig), [intlConfig]);\n    const decimalSeparator = _decimalSeparator || localeConfig.decimalSeparator || '';\n    const groupSeparator = _groupSeparator || localeConfig.groupSeparator || '';\n\n    const formatValueOptions = {\n      decimalSeparator,\n      groupSeparator,\n      disableGroupSeparators,\n      intlConfig,\n      prefix: prefix || localeConfig.prefix,\n      suffix: suffix,\n    };\n\n    const cleanValueOptions: Partial<CleanValueOptions> = {\n      decimalSeparator,\n      groupSeparator,\n      allowDecimals,\n      decimalsLimit: decimalsLimit || fixedDecimalLength || 2,\n      allowNegativeValue,\n      disableAbbreviations,\n      prefix: prefix || localeConfig.prefix,\n    };\n\n    const formattedStateValue =\n      defaultValue !== undefined\n        ? formatValue({ ...formatValueOptions, decimalScale, value: String(defaultValue) })\n        : userValue !== undefined\n        ? formatValue({ ...formatValueOptions, decimalScale, value: String(userValue) })\n        : '';\n\n    const [stateValue, setStateValue] = useState(formattedStateValue);\n    const [dirty, setDirty] = useState(false);\n    const [cursor, setCursor] = useState(0);\n    const inputRef = ref || useRef<HTMLInputElement>(null);\n\n    const processChange = (value: string, selectionStart?: number | null): void => {\n      setDirty(true);\n      const valueOnly = cleanValue({ value, ...cleanValueOptions });\n\n      if (valueOnly === '') {\n        onValueChange && onValueChange(undefined, name);\n        setStateValue('');\n        return;\n      }\n\n      if (userMaxLength && valueOnly.replace(/-/g, '').length > userMaxLength) {\n        return;\n      }\n\n      if (valueOnly === '-' || valueOnly === decimalSeparator) {\n        onValueChange && onValueChange(undefined, name);\n        setStateValue(value);\n        return;\n      }\n\n      const formattedValue = formatValue({ value: valueOnly, ...formatValueOptions });\n\n      /* istanbul ignore next */\n      if (selectionStart !== undefined && selectionStart !== null) {\n        // Prevent cursor jumping\n        const cursor = selectionStart + (formattedValue.length - value.length) || 1;\n        setCursor(cursor);\n      }\n\n      setStateValue(formattedValue);\n\n      onValueChange && onValueChange(valueOnly, name);\n    };\n\n    const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n      const {\n        target: { value, selectionStart },\n      } = event;\n\n      processChange(value, selectionStart);\n\n      onChange && onChange(event);\n    };\n\n    const handleOnFocus = (event: React.FocusEvent<HTMLInputElement>): number => {\n      onFocus && onFocus(event);\n      return stateValue ? stateValue.length : 0;\n    };\n\n    const handleOnBlur = (event: React.FocusEvent<HTMLInputElement>): void => {\n      const {\n        target: { value },\n      } = event;\n\n      const valueOnly = cleanValue({ value, ...cleanValueOptions });\n\n      if (valueOnly === '-' || !valueOnly) {\n        setStateValue('');\n        onBlur && onBlur(event);\n        return;\n      }\n\n      const fixedDecimals = fixedDecimalValue(valueOnly, decimalSeparator, fixedDecimalLength);\n\n      // Add padding or trim value to decimalScale\n      const newValue = padTrimValue(\n        fixedDecimals,\n        decimalSeparator,\n        decimalScale !== undefined ? decimalScale : fixedDecimalLength\n      );\n\n      onValueChange && onValueChange(newValue, name);\n\n      const formattedValue = formatValue({\n        ...formatValueOptions,\n        value: newValue,\n      });\n\n      setStateValue(formattedValue);\n\n      onBlur && onBlur(event);\n    };\n\n    const handleOnKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      const { key } = event;\n\n      if (step && (key === 'ArrowUp' || key === 'ArrowDown')) {\n        event.preventDefault();\n        setCursor(stateValue.length);\n\n        const currentValue =\n          parseFloat(\n            userValue !== undefined\n              ? String(userValue).replace(decimalSeparator, '.')\n              : cleanValue({ value: stateValue, ...cleanValueOptions })\n          ) || 0;\n        const newValue = key === 'ArrowUp' ? currentValue + step : currentValue - step;\n\n        if (min !== undefined && newValue < min) {\n          return;\n        }\n\n        if (max !== undefined && newValue > max) {\n          return;\n        }\n\n        const fixedLength = String(step).includes(decimalSeparator)\n          ? Number(String(step).split(decimalSeparator)[1].length)\n          : undefined;\n\n        processChange(\n          String(fixedLength ? newValue.toFixed(fixedLength) : newValue).replace(\n            '.',\n            decimalSeparator\n          )\n        );\n      }\n\n      onKeyDown && onKeyDown(event);\n    };\n\n    const handleOnKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      const {\n        key,\n        currentTarget: { selectionStart },\n      } = event;\n      if (key !== 'ArrowUp' && key !== 'ArrowDown' && stateValue !== '-') {\n        const suffix = getSuffix(stateValue, { groupSeparator, decimalSeparator });\n\n        if (suffix && selectionStart && selectionStart > stateValue.length - suffix.length) {\n          if (inputRef && typeof inputRef === 'object' && inputRef.current) {\n            const newCursor = stateValue.length - suffix.length;\n            inputRef.current.setSelectionRange(newCursor, newCursor);\n          }\n        }\n      }\n\n      onKeyUp && onKeyUp(event);\n    };\n\n    /* istanbul ignore next */\n    useEffect(() => {\n      // prevent cursor jumping if editing value\n      if (\n        dirty &&\n        stateValue !== '-' &&\n        inputRef &&\n        typeof inputRef === 'object' &&\n        inputRef.current\n      ) {\n        inputRef.current.setSelectionRange(cursor, cursor);\n      }\n    }, [cursor, inputRef, dirty]);\n\n    const formattedPropsValue =\n      userValue !== undefined\n        ? formatValue({\n            ...formatValueOptions,\n            decimalScale: dirty ? undefined : decimalScale,\n            value: String(userValue),\n          })\n        : undefined;\n\n    const inputProps: React.InputHTMLAttributes<HTMLInputElement> = {\n      type: 'text',\n      inputMode: 'decimal',\n      id,\n      name,\n      className,\n      onChange: handleOnChange,\n      onBlur: handleOnBlur,\n      onFocus: handleOnFocus,\n      onKeyDown: handleOnKeyDown,\n      onKeyUp: handleOnKeyUp,\n      placeholder,\n      disabled,\n      value:\n        formattedPropsValue !== undefined && stateValue !== '-' && stateValue !== decimalSeparator\n          ? formattedPropsValue\n          : stateValue,\n      ref: inputRef,\n      ...props,\n    };\n\n    if (customInput) {\n      const CustomInput = customInput;\n      return <CustomInput {...inputProps} />;\n    }\n\n    return <input {...inputProps} />;\n  }\n);\n\nCurrencyInput.displayName = 'CurrencyInput';\n\nexport default CurrencyInput;\n","module.exports = require(\"react\");","export * from './cleanValue';\nexport * from './fixedDecimalValue';\nexport * from './formatValue';\nexport * from './getLocaleConfig';\nexport * from './getSuffix';\nexport * from './isNumber';\nexport * from './padTrimValue';\n","import { parseAbbrValue } from './parseAbbrValue';\nimport { removeSeparators } from './removeSeparators';\nimport { removeInvalidChars } from './removeInvalidChars';\nimport { escapeRegExp } from './escapeRegExp';\nimport { CurrencyInputProps } from '../CurrencyInputProps';\n\nexport type CleanValueOptions = Pick<\n  CurrencyInputProps,\n  | 'decimalSeparator'\n  | 'groupSeparator'\n  | 'allowDecimals'\n  | 'decimalsLimit'\n  | 'allowNegativeValue'\n  | 'disableAbbreviations'\n  | 'prefix'\n> & { value: string };\n\n/**\n * Remove prefix, separators and extra decimals from value\n */\nexport const cleanValue = ({\n  value,\n  groupSeparator = ',',\n  decimalSeparator = '.',\n  allowDecimals = true,\n  decimalsLimit = 2,\n  allowNegativeValue = true,\n  disableAbbreviations = false,\n  prefix = '',\n}: CleanValueOptions): string => {\n  if (value === '-') {\n    return value;\n  }\n\n  const abbreviations = disableAbbreviations ? [] : ['k', 'm', 'b'];\n  const reg = new RegExp(`((^|\\\\D)-\\\\d)|(-${escapeRegExp(prefix)})`);\n  const isNegative = reg.test(value);\n\n  // Is there a digit before the prefix? eg. 1$\n  const [prefixWithValue, preValue] = RegExp(`(\\\\d+)-?${escapeRegExp(prefix)}`).exec(value) || [];\n  const withoutPrefix = prefix\n    ? prefixWithValue\n      ? value.replace(prefixWithValue, '').concat(preValue)\n      : value.replace(prefix, '')\n    : value;\n  const withoutSeparators = removeSeparators(withoutPrefix, groupSeparator);\n  const withoutInvalidChars = removeInvalidChars(withoutSeparators, [\n    groupSeparator,\n    decimalSeparator,\n    ...abbreviations,\n  ]);\n\n  let valueOnly = withoutInvalidChars;\n\n  if (!disableAbbreviations) {\n    // disallow letter without number\n    if (abbreviations.some((letter) => letter === withoutInvalidChars.toLowerCase())) {\n      return '';\n    }\n    const parsed = parseAbbrValue(withoutInvalidChars, decimalSeparator);\n    if (parsed) {\n      valueOnly = String(parsed);\n    }\n  }\n\n  const includeNegative = isNegative && allowNegativeValue ? '-' : '';\n\n  if (decimalSeparator && valueOnly.includes(decimalSeparator)) {\n    const [int, decimals] = withoutInvalidChars.split(decimalSeparator);\n    const trimmedDecimals = decimalsLimit && decimals ? decimals.slice(0, decimalsLimit) : decimals;\n    const includeDecimals = allowDecimals ? `${decimalSeparator}${trimmedDecimals}` : '';\n\n    return `${includeNegative}${int}${includeDecimals}`;\n  }\n\n  return `${includeNegative}${valueOnly}`;\n};\n","import { escapeRegExp } from './escapeRegExp';\n\n/**\n * Abbreviate number eg. 1000 = 1k\n *\n * Source: https://stackoverflow.com/a/9345181\n */\nexport const abbrValue = (value: number, decimalSeparator = '.', _decimalPlaces = 10): string => {\n  if (value > 999) {\n    let valueLength = ('' + value).length;\n    const p = Math.pow;\n    const d = p(10, _decimalPlaces);\n    valueLength -= valueLength % 3;\n\n    const abbrValue = Math.round((value * d) / p(10, valueLength)) / d + ' kMGTPE'[valueLength / 3];\n    return abbrValue.replace('.', decimalSeparator);\n  }\n\n  return String(value);\n};\n\ntype AbbrMap = { [key: string]: number };\n\nconst abbrMap: AbbrMap = { k: 1000, m: 1000000, b: 1000000000 };\n\n/**\n * Parse a value with abbreviation e.g 1k = 1000\n */\nexport const parseAbbrValue = (value: string, decimalSeparator = '.'): number | undefined => {\n  const reg = new RegExp(`(\\\\d+(${escapeRegExp(decimalSeparator)}\\\\d+)?)([kmb])$`, 'i');\n  const match = value.match(reg);\n\n  if (match) {\n    const [, digits, , abbr] = match;\n    const multiplier = abbrMap[abbr.toLowerCase()];\n\n    return Number(digits.replace(decimalSeparator, '.')) * multiplier;\n  }\n\n  return undefined;\n};\n","import { escapeRegExp } from './escapeRegExp';\n\n/**\n * Remove group separator from value eg. 1,000 > 1000\n */\nexport const removeSeparators = (value: string, separator = ','): string => {\n  const reg = new RegExp(escapeRegExp(separator), 'g');\n  return value.replace(reg, '');\n};\n","import { escapeRegExp } from './escapeRegExp';\n\n/**\n * Remove invalid characters\n */\nexport const removeInvalidChars = (value: string, validChars: ReadonlyArray<string>): string => {\n  const chars = escapeRegExp(validChars.join(''));\n  const reg = new RegExp(`[^\\\\d${chars}]`, 'gi');\n  return value.replace(reg, '');\n};\n","export const fixedDecimalValue = (\n  value: string,\n  decimalSeparator: string,\n  fixedDecimalLength?: number\n): string => {\n  if (fixedDecimalLength && value.length > 1) {\n    if (value.includes(decimalSeparator)) {\n      const [int, decimals] = value.split(decimalSeparator);\n      if (decimals.length > fixedDecimalLength) {\n        return `${int}${decimalSeparator}${decimals.slice(0, fixedDecimalLength)}`;\n      }\n    }\n\n    const reg =\n      value.length > fixedDecimalLength\n        ? new RegExp(`(\\\\d+)(\\\\d{${fixedDecimalLength}})`)\n        : new RegExp(`(\\\\d)(\\\\d+)`);\n\n    const match = value.match(reg);\n    if (match) {\n      const [, int, decimals] = match;\n      return `${int}${decimalSeparator}${decimals}`;\n    }\n  }\n\n  return value;\n};\n","import { IntlConfig } from '../CurrencyInputProps';\n\ntype LocaleConfig = {\n  currencySymbol: string;\n  groupSeparator: string;\n  decimalSeparator: string;\n  prefix: string;\n  suffix: string;\n};\n\nconst defaultConfig: LocaleConfig = {\n  currencySymbol: '',\n  groupSeparator: '',\n  decimalSeparator: '',\n  prefix: '',\n  suffix: '',\n};\n\n/**\n * Get locale config from input or default\n */\nexport const getLocaleConfig = (intlConfig?: IntlConfig): LocaleConfig => {\n  const { locale, currency } = intlConfig || {};\n  const numberFormatter = locale\n    ? new Intl.NumberFormat(locale, currency ? { currency, style: 'currency' } : undefined)\n    : new Intl.NumberFormat();\n\n  return numberFormatter.formatToParts(1000.1).reduce((prev, curr, i): LocaleConfig => {\n    if (curr.type === 'currency') {\n      if (i === 0) {\n        return { ...prev, currencySymbol: curr.value, prefix: curr.value };\n      } else {\n        return { ...prev, currencySymbol: curr.value, suffix: curr.value };\n      }\n    }\n    if (curr.type === 'group') {\n      return { ...prev, groupSeparator: curr.value };\n    }\n    if (curr.type === 'decimal') {\n      return { ...prev, decimalSeparator: curr.value };\n    }\n\n    return prev;\n  }, defaultConfig);\n};\n","export const isNumber = (input: string): boolean => RegExp(/\\d/, 'gi').test(input);\n","export const padTrimValue = (\n  value: string,\n  decimalSeparator = '.',\n  decimalScale?: number\n): string => {\n  if (decimalScale === undefined || value === '' || value === undefined) {\n    return value;\n  }\n\n  if (!value.match(/\\d/g)) {\n    return '';\n  }\n\n  const [int, decimals] = value.split(decimalSeparator);\n\n  if (decimalScale === 0) {\n    return int;\n  }\n\n  let newValue = decimals || '';\n\n  if (newValue.length < decimalScale) {\n    while (newValue.length < decimalScale) {\n      newValue += '0';\n    }\n  } else {\n    newValue = newValue.slice(0, decimalScale);\n  }\n\n  return `${int}${decimalSeparator}${newValue}`;\n};\n"],"sourceRoot":""}